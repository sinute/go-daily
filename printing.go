package main

import (
	"fmt"
)

type printing struct {
	val int
	ptr *int
}

func Printing() {
	p := new(printing)
	p.val = 233
	p.ptr = &p.val

	/****************************************************************
	 * 一般的
	 ****************************************************************/

	// 默认格式的值
	fmt.Printf("%v\n", p) // &{233 0xc0820001a0}
	// 当打印结构体的时候加上字段名
	fmt.Printf("%+v\n", p) // &{val:233 ptr:0xc0820001a0}
	// GO语法表示
	fmt.Printf("%#v\n", p) // &main.printing{val:233, ptr:(*int)(0xc0820001a0)}
	// GO语法表示的类型
	fmt.Printf("%T\n", p) // *main.printing
	// 百分号
	fmt.Printf("%%\n") // %

	/****************************************************************
	 * 布尔
	 ****************************************************************/

	// true或者false
	fmt.Printf("%t\n", true) // true

	/****************************************************************
	 * 整数
	 ****************************************************************/

	// 二进制表示
	fmt.Printf("%b\n", 39) // 100111
	// Unicode表示的字符
	fmt.Printf("%c\n", 39) // '
	// 十进制表示
	fmt.Printf("%d\n", 39) // 39
	// 八进制表示
	fmt.Printf("%o\n", 39) // 47
	// 单引号安全包裹的字符
	fmt.Printf("%q\n", 39) // '\''
	// 十六进制表示, 小写字母
	fmt.Printf("%x\n", 12) // c
	// 十六进制表示, 大写字母
	fmt.Printf("%X\n", 12) // C
	// Unicode格式
	fmt.Printf("%U\n", 39) // U+0027

	/****************************************************************
	 * 浮点数及复合
	 ****************************************************************/

	// 无小数部分
	fmt.Printf("%b\n", 123.456) // 8687443681197687p-46
	// 科学记数法, e小写
	fmt.Printf("%0.4e\n", 123.456) // 1.2346e+02
	// 科学记数法, e大写
	fmt.Printf("%0.4E\n", 123.456) // 1.2346E+02
	// 小数, 但没有指数
	fmt.Printf("%0.2f\n", 1.23456e1) // 12.35
	// 和%f相同
	fmt.Printf("%0.2F\n", 1.23456e1) // 12.35
	// 更加紧凑的%e, 对%f相反
	fmt.Printf("%0.3g\n", 1.23456e10) // 1.23e+10
	// 更加紧凑的%E, 对%F相反
	fmt.Printf("%0.3G\n", 1.23456e10) // 1.23E+10

	/****************************************************************
	 * 字符串及字节切片
	 ****************************************************************/

	// 未解释的字符串或切片
	fmt.Printf("%s\n", []byte{97, 98, 99}) // abc
	// 双引号安全包裹的字符串
	fmt.Printf("%q\n", []byte{39, 34, 92}) // "'\"\\"
	// 十六进制表示, 小写字母
	fmt.Printf("%x\n", "xyz") // 78797a
	// 十六进制表示, 大写字母
	fmt.Printf("%X\n", "xyz") // 78797A

	/****************************************************************
	 * 指针
	 ****************************************************************/

	// 由0x开头的十六进制地址
	fmt.Printf("%p\n", p) // 0xc0820001a0
}
